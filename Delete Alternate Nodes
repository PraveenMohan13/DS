Given a Singly Linked List of integers, delete all the alternate nodes in the list.
Example:
List: 10 -> 20 -> 30 -> 40 -> 50 -> 60 -> null
Alternate nodes will be: 20, 40, and 60.
Hence after deleting, the list will be:
Output: 10 -> 30 -> 50 -> null
Input Format

The first and the only line of input will contain the elements of the Singly Linked List separated by a single space and terminated by -1.
Constraints

1 <= N <= 10 ^ 6.
Where N is the size of the Singly Linked List
Time Limit: 1 sec
Output Format

The only line of output will contain the updated list elements.
Sample Input 0

1 2 3 4 5 -1
Sample Output 0

1 3 5
Sample Input 1

10 20 30 40 50 60 70 -1
Sample Output 1

10 30 50 70
---------------------------------------------------------------------------------------

import java.io.*;
import java.util.*;

public class Solution {
    
    node head=null;
    node temp=null;
    class node
    {
        int data;
        node next=null;
        node(int data)
        {
            this.data=data;
            next=null;
        }
    }
    void ins(int data)
    {
        node newnode=new node(data);
        if(head==null)
        {
            head=newnode;
            temp=newnode;
        }
        else
        {
            temp.next=newnode;
            temp=newnode;
        }
    }
    
    void del()
    {
        if(head.next==null)
            return;
        else
        {
            node f=head;
            node s;
            
            while(f!=null&&f.next!=null)
            {
                s=f.next;
                f.next=s.next;
                f=f.next;
            }  
        }
    }  
    void dis()
    {
        temp=head;
        while(temp !=null)
        {
            System.out.print(temp.data+" ");
            temp=temp.next;
        }
    }

    public static void main(String[] args) {
        
        Scanner z=new Scanner(System.in);
        Solution o=new Solution();
        while(true)
        {
            int data=z.nextInt();
            if(data==-1)
                break;
            else
                o.ins(data);
        }
        o.del();
        o.dis();
        
        
    }
}
==========================================================================================================

#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* next;
};

struct node* newNode(int data) {
    struct node* new_node = (struct node*)malloc(sizeof(struct node));
    new_node->data = data;
    new_node->next = NULL;
    return new_node;
}

struct node* takeInput() {
    struct node* head = NULL;
    struct node* tail = NULL;
    int data;

    printf("Enter elements (Enter -1 to stop): ");
    while (1) {
        scanf("%d", &data);
        if (data == -1)
            break;

        struct node* newnode = newNode(data);
        if (head == NULL) {
            head = newnode;
            tail = newnode;
        } else {
            tail->next = newnode;
            tail = newnode;
        }
    }
    return head;
}

void deleteAlternateNodes(struct node* head) {
    struct node* cur = head;
    struct node* cur1;

    while (cur != NULL && cur->next != NULL) {
        cur1 = cur->next;
        cur->next = cur1->next;
        free(cur1);
        cur = cur->next;
    }
}

void print(struct node* head) {
    while (head != NULL) {
        printf("%d ", head->data);
        head = head->next;
    }
    printf("\n");
}

void freeLinkedList(struct node* head) {
    struct node* temp;
    while (head != NULL) {
        temp = head;
        head = head->next;
        free(temp);
    }
}

int main() {
    struct node* head = takeInput();
    deleteAlternateNodes(head);
    print(head);
    freeLinkedList(head);
    return 0;
}


    public static void main(String[] args) {
        node head = takeInput();
        deleteAlternateNodes(head);
        print(head);
    }
}

=========================================================================================================================






import java.io.*;
import java.util.*;

class node
{
    int data;
    node next;
    
    node(int data)
    {
        this.data = data;
        next = null;
    }
}


public class Solution {
    
    public static node takeInput() 
    {

        node head = null, tail = null;
        Scanner s = new Scanner(System.in);
        int data = s.nextInt();

        while(data != -1) 
        {
            node newnode = new node(data);
            if (head == null) 
            {
                head = newnode;
                tail = newnode;

            } else 
            {
                tail.next = newnode;
                tail = newnode;
            }
            data = s.nextInt();
        }
        return head;
    }

    public static void deleteAlternateNodes(node head) {
        node cur = head;
        node cur1;
        
        while(cur != null && cur.next != null){
            cur1 = cur.next;
            cur.next = cur1.next;
            cur = cur.next;
            
        }
    }
    
    public static void print(node head)
    {
        while(head != null)
        {
            System.out.print(head.data + " ");
            head = head.next;
        }
        
        System.out.println();
    }
==============================================================================================================================================
public void AltDelete()
    {
        Node curr = this.head;
        int count = 1;
        Node prev = null;
        while(curr!=null)
        {
            if(count%2==0)
            {
                 count++;
                 prev.next = curr.next;
                 curr=curr.next;
                 
            }
            else
            {
                count++;
                prev = curr;
                curr = curr.next;
            }
        }

    }
