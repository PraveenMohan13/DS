Take input in the form of level order traversal
Input Format

First line array size
Array elements
Constraints

No

Output Format

Level order traversal of tree

Sample Input 0

5
10 20 30 40 50
Sample Output 0

10 20 30 40 50
Sample Input 1

3
1 2 3
Sample Output 1

1 2 3
--------------------------------------------------------------------------------------------------------------------------------------------------------------------
import java.io.*;
import java.util.*;

public class Solution 
{
    static class Node
    {
      int data;
      Node left;
      Node right;
        
        public Node(int data) 
    {
            this.data = data;
            this.left = null;
            this.right = null;
        }
    }
   
       static Node root = null;

        static Queue<Node> q =new LinkedList<>();

    
   
    
        static void insertValue(int value)
        {
          Node nn =new Node(value);
          if (root == null)
            root = nn;

          else if (q.peek().left == null)
            q.peek().left = nn;
          else
          {
            q.peek().right = nn;
            q.remove();
          }
          q.add(nn);

        }
            static void printlevelOrder(Node root)
            {
              if (root == null)
                return;
                
              Queue<Node> q1 =new LinkedList<>();
              q1.add(root);
        
              while (!q1.isEmpty())
              {
                System.out.print(q1.peek().data + " ");
                if (q1.peek().left != null)
                  q1.add(q1.peek().left);
                if (q1.peek().right != null)
                  q1.add(q1.peek().right);
                q1.remove();
              }
            }

    public static void main(String[] args) 
    {
        Scanner z = new Scanner(System.in);
        int n = z.nextInt();
        for(int i=0;i<n;i++)
        {
            insertValue(z.nextInt());
        }
        printlevelOrder(root);
    }
}



----------------------------------------------------------------------
import java.io.*;
import java.util.*;

public class Solution 
{
    static class Node
    {
      int key;
      Node left;
      Node right;
    };
   
        static Node root = null;

        static Queue<Node> q =new LinkedList<>();

        static Node newNode(int value)
        {
          Node n = new Node();
          n.key = value;
          n.left = null;
          n.right = null;
          return n;
        }
 
        static void insertValue(int value)
        {
          Node node = newNode(value);
          if (root == null)
            root = node;

          else if (q.peek().left == null)
            q.peek().left = node;
          else
          {
            q.peek().right = node;
            q.remove();
          }
          q.add(node);

        }

        static void createTree(int arr[],int n)
        {
          for (int i = 0; i < n; i++)
            insertValue(arr[i]);
        }
 
            static void levelOrder(Node root)
            {
              if (root == null)
                return;
              Queue<Node> n =new LinkedList<>();
              n.add(root);
              while (!n.isEmpty())
              {
                System.out.print(n.peek().key + " ");
                if (n.peek().left != null)
                  n.add(n.peek().left);
                if (n.peek().right != null)
                  n.add(n.peek().right);
                n.remove();
              }
            }

    public static void main(String[] args) 
    {
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int arr[] = new int[n];
        for(int i=0;i<n;i++)
        {
            arr[i] = sc.nextInt();
        }
        createTree(arr,n);
        levelOrder(root);
    }
}
==============================================================================
from queue import Queue

class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

root = None
q = Queue()

def insert_value(value):
    global root
    nn = Node(value)
    if root is None:
        root = nn
    elif q.queue[0].left is None:
        q.queue[0].left = nn
    else:
        q.queue[0].right = nn
        q.get()
    q.put(nn)

def print_level_order(root):
    if root is None:
        return
    
    q1 = Queue()
    q1.put(root)

    while not q1.empty():
        print(q1.queue[0].data, end=" ")
        if q1.queue[0].left is not None:
            q1.put(q1.queue[0].left)
        if q1.queue[0].right is not None:
            q1.put(q1.queue[0].right)
        q1.get()

if __name__ == "__main__":
    n = int(input())
    values = list(map(int, input().split()))

    for i in range(n):
        insert_value(values[i])

    print_level_order(root)
