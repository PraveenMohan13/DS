import java.io.*;
import java.util.*;
import java.text.*;
import java.math.*;
import java.util.regex.*;

public class Solution {

    public static void main(String[] args) {
       Scanner z = new Scanner(System.in);
        Queue<Integer> q = new LinkedList<>();
        int v = z.nextInt();
        int e = z.nextInt();
        int a[][] = new int[v][v];
        for(int i=0;i<e;i++)
        {
            int v1 = z.nextInt();
            int v2 = z.nextInt();
            a[v1][v2]=1;
            a[v2][v1]=1;
        }
        boolean vis[] = new boolean[v];
        vis[0]=true;
        q.add(0);
        while(!q.isEmpty())
        {
            int t = q.poll();
            System.out.print(t+" ");
            for(int i=0;i<v;i++)
            {
                if(a[t][i]==1 && !vis[i])
                {
                    q.add(i);
                    vis[i]=true;
                }
            }
        }
        
        
    }
}
============================================================================================================


BFS Traversal
Write a program to implement the BFS traversal of a graph.



Example:

Input:

4

0 1

0 2

1 2

2 0

2 3

3 3

-1 -1

Output:

BFS : 0 1 2 3 

Note:

Start the vertex from 0. To stop reading, read the edge as -1 -1. Start the BFS traversal from vertex 0.

If the number of vertices is 0 then print "Graph doesn't exist".
=============================================================================================================================
import java.util.*;

  class Main
  {

      void BFS(int s,LinkedList adj[],int V)
      {
          boolean visited[] = new boolean[V];

          LinkedList<Integer> queue = new LinkedList<Integer>();

          visited[s]=true;
          queue.add(s);

          while (queue.size() != 0)
          {
              s = queue.poll();
              System.out.print(s+" ");

              Iterator<Integer> i = adj[s].listIterator();
              while (i.hasNext())
              {
                  int n = i.next();
                  if (!visited[n])
                  {
                      visited[n] = true;
                      queue.add(n);
                  }
              }
          }
      }

      public static void main(String args[])
      {
          Scanner sc = new Scanner(System.in);
          int n = sc.nextInt();
          Main g = new Main();
          LinkedList<Integer> adj[] = new LinkedList[n];
          for (int i=0; i<n; ++i)
              adj[i] = new LinkedList();
          int a , b ;
          while(n>0)
          {
            a = sc.nextInt() ;
            b = sc.nextInt() ;

            if(a == -1 || b == -1)
              break;

            adj[a].add(b);
          }
          if (n == 0)
              System.out.println( "Graph doesn't exist");
          else
          {
              System.out.print("BFS : ");
              g.BFS(0,adj,n);
          }
      }
  }
---------------------------------------------------------------------------------------------------------------------------------
from collections import deque

def print_bfs_helper(li, sv, visited):
    queue = deque()
    visited[sv] = True
    queue.append(sv)
    
    while queue:
        front = queue.popleft()
        print(front, end=" ")
        
        for i in range(len(li)):
            if li[front][i] == 1 and not visited[i]:
                visited[i] = True
                queue.append(i)

def print_bfs(li):
    visited = [False] * len(li)
    for i in range(len(li)):
        if not visited[i]:
            print_bfs_helper(li, i, visited)

if __name__ == "__main__":
    n, e = map(int, input().split())
    if n == 0:
        exit()

    li = [[0 for _ in range(n)] for _ in range(n)]

    for _ in range(e):
        fv, sv = map(int, input().split())
        li[fv][sv] = 1
        li[sv][fv] = 1

    print_bfs(li)
============================================================================================
import java.util.*;

  class Main
  {
      int V; 
      LinkedList<Integer> adj[]; 

      Main(int v)
      {
          V = v;
          adj = new LinkedList[v];
          for (int i=0; i<v; ++i)
              adj[i] = new LinkedList();
      }

      void addEdge(int v,int w)
      {
          adj[v].add(w);
      }

      void BFS(int s)
      {
          boolean visited[] = new boolean[V];

          LinkedList<Integer> queue = new LinkedList<Integer>();

          visited[s]=true;
          queue.add(s);

          while (queue.size() != 0)
          {
              s = queue.poll();
              System.out.print(s+" ");

              Iterator<Integer> i = adj[s].listIterator();
              while (i.hasNext())
              {
                  int n = i.next();
                  if (!visited[n])
                  {
                      visited[n] = true;
                      queue.add(n);
                  }
              }
          }
      }

      public static void main(String args[])
      {
          Scanner sc = new Scanner(System.in);
          int n = sc.nextInt();
          Main g = new Main(n);
          int a , b ;
          while(n>0)
          {
            a = sc.nextInt() ;
            b = sc.nextInt() ;

            if(a == -1 || b == -1)
              break;

            g.addEdge(a, b);
          }
          if (n == 0)
              System.out.println( "Graph doesn't exist");
          else
          {
              System.out.print("BFS : ");
              g.BFS(0);
          }
      }
  }
