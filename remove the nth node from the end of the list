Given the head of a linked list, remove the nth node from the end of the list and return its head.
Example 1:
Input: head = [1,2,3,4,5], n = 2
Output: [1,2,3,5]
Example 2:

Input: head = [1], n = 1
Output: []
Example 3:

Input: head = [1,2], n = 1
Output: [1]
Constraints:
The number of nodes in the list is sz.
1 <= sz <= 30
0 <= Node.val <= 100
1 <= n <= sz

========================================================
/**
 * Definition for singly-linked list.
 * public class ListNode {
 *     int val;
 *     ListNode next;
 *     ListNode() {}
 *     ListNode(int val) { this.val = val; }
 *     ListNode(int val, ListNode next) { this.val = val; this.next = next; }
 * }
 */
class Solution {
    public static int len(ListNode head)
    {
        ListNode T=head;
        int c=0;
        while(T!=null)
        {
            T=T.next;
            c++;
        }
        return c;
    }
    public ListNode removeNthFromEnd(ListNode head, int n) {
        int l=len(head);
        int s=l-n;
        if(head==null)
            return head;
        if(s==0){
            head=head.next;
            return head;
        }

        ListNode t=head;
        for(int i=1;i<s;i++)
        {
            t=t.next;
        }
        if(t.next!=null)
            t.next=t.next.next;
      return head;  
    }
}
