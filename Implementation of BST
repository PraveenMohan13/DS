import java.io.*;
import java.util.*;



public class Solution 
{
    class Node 
    {
    int data;
    Node left;
    Node right;

    public Node(int data) 
    {
        this.data = data;
    }
}
     
    
    

    private Node ins(int data, Node root){
        if(root == null){
            Node newNode = new Node(data);
            return newNode;
        }
        
        if(root.data >= data)
        {
            root.left = ins(data, root.left);
        }else
        {
            root.right = ins(data,root.right);
        }
        return root;
    }
    
    

    
    private Node remove(int data, Node root){
        if(root == null)
        {
            return null;
        }
        if(data < root.data)
        {
            root.left = remove(data,root.left);
            return root;
        }
        else if(data > root.data)
        {
            root.right = remove(data, root.right);
            return root;
        }
        else
        {
            if(root.left == null && root.right == null)
            {
                return null;
            }
            else if(root.left == null)
            {
                return root.right;
            }
            else if(root.right == null)
            {
                return root.left;
            }
            else
            {
                Node minNode = root.right;
                while(minNode.left != null)
                {
                    minNode = minNode.left;
                }
                root.data = minNode.data;
                root.right = remove(minNode.data, root.right);
                return root;
            }
        }
    }
    
 
    private void print(Node root)
    {
        if(root == null)
        {
            return;
        }
        System.out.print(root.data + ":");
        if(root.left!= null)
        {
            System.out.print("L:" + root.left.data + ",");
        }
        
        if(root.right!= null)
        {
            System.out.print("R:" + root.right.data);
        }
        System.out.println();
        print(root.left);
        print(root.right);
    }
    

    public boolean search(int data, Node root){
        if(root == null)
        {
            return false;
        }
        if(root.data == data)
        {
            return true;
        }
        else if(data > root.data)
        {
            return search(data,root.right);
        }
        else
        {
            return search(data, root.left);
        }
    }

    public static void main(String[] args) 
    {
        Scanner z=new Scanner(System.in);
        Solution o = new Solution();
        int choice, input;
        Node root=null;
        int q = z.nextInt();
        while (q-- > 0) 
        {
            choice = z.nextInt();
            switch (choice) 
            {
            case 1:
                input = z.nextInt();
                root=o.ins(input,root);
                break;
            case 2:
                input = z.nextInt();
                root=o.remove(input,root);
                break;
            case 3:
                input = z.nextInt();
                System.out.println(o.search(input,root));
                break;
            default:
                o.print(root);
                break;
            }
        }
    }
}
==========================================================================================================================================================
class Node:
    def __init__(self, data):
        self.data = data
        self.left = None
        self.right = None

class Solution:
    def ins(self, data, root):
        if root is None:
            new_node = Node(data)
            return new_node

        if data <= root.data:
            root.left = self.ins(data, root.left)
        else:
            root.right = self.ins(data, root.right)
        return root

    def remove(self, data, root):
        if root is None:
            return None

        if data < root.data:
            root.left = self.remove(data, root.left)
        elif data > root.data:
            root.right = self.remove(data, root.right)
        else:
            if root.left is None and root.right is None:
                return None
            elif root.left is None:
                return root.right
            elif root.right is None:
                return root.left
            else:
                min_node = root.right
                while min_node.left is not None:
                    min_node = min_node.left
                root.data = min_node.data
                root.right = self.remove(min_node.data, root.right)
        return root

    def print_tree(self, root):
        if root is None:
            return
        print(f"{root.data}:", end="")
        if root.left is not None:
            print(f"L:{root.left.data},", end="")
        if root.right is not None:
            print(f"R:{root.right.data}", end="")
        print()
        self.print_tree(root.left)
        self.print_tree(root.right)

    def search(self, data, root):
        if root is None:
            return False
        if data == root.data:
            return True
        elif data > root.data:
            return self.search(data, root.right)
        else:
            return self.search(data, root.left)

if __name__ == "__main__":
    o = Solution()
    root = None
    q = int(input())
    
    while q > 0:
        choice = int(input())
        
        if choice == 1:
            data = int(input())
            root = o.ins(data, root)
        elif choice == 2:
            data = int(input())
            root = o.remove(data, root)
        elif choice == 3:
            data = int(input())
            print(o.search(data, root))
        else:
            o.print_tree(root)
        
        q -= 1
